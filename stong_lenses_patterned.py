# -*- coding: utf-8 -*-
"""stong lenses patterned

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E47bZ9t82DrxOVmmFlfqvtHtrXgHUmq-
"""

# Essential imports for Google Colab
import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad
import os

!pip install numpy pandas astropy scipy astroquery

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad
import os

!pip install numpy pandas astropy astroquery

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad
import os

# Parameters for Einstein Cross
einstein_ra = 340.307875  # Q2237+0305 RA (J2000) in degrees
einstein_dec = 0.69379    # Q2237+0305 DEC (J2000) in degrees
einstein_z = 0.0394       # Lens galaxy redshift
z_tol = 0.01              # Tight redshift window due to low z

# Apertures in arcminutes (very local to field scale)
radii_arcmin = np.array([0.1, 0.2, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0])

catalog_filename = 'einstein_cross_bh_related.csv'

# BH-related SIMBAD types (same conservative selection)
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

# Delete cache file if exists to force fresh query
if os.path.exists(catalog_filename):
    os.remove(catalog_filename)
    print(f"Deleted old cache file {catalog_filename}")

# Center coordinate for Einstein Cross
cluster_center = SkyCoord(ra=einstein_ra * u.deg, dec=einstein_dec * u.deg)

# Setup SIMBAD query with additional fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'rvz_redshift')

print(f"Querying SIMBAD around Einstein Cross ({einstein_ra}, {einstein_dec}) within 5 deg radius...")
result = custom_simbad.query_region(cluster_center, radius=5.0 * u.deg)
if result is None:
    raise ValueError("SIMBAD query returned no results.")

print(f"Total SIMBAD objects found: {len(result)}")

df = result.to_pandas()
df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

# Filter BH-type objects by object type and redshift window
pattern = '|'.join(bh_types)
df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
df_filtered = df_filtered[
    (df_filtered['rvz_redshift'] >= einstein_z - z_tol) &
    (df_filtered['rvz_redshift'] <= einstein_z + z_tol)
]

if df_filtered.empty:
    raise ValueError("No BH-related objects found within redshift window.")

# Convert coordinates to SkyCoord
coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))
df_filtered.loc[:, 'ra'] = coords.ra.deg
df_filtered.loc[:, 'dec'] = coords.dec.deg

# Save filtered BH catalog to CSV
df_filtered[['main_id', 'ra', 'dec', 'otype', 'rvz_redshift']].to_csv(catalog_filename, index=False)
print(f"Saved {len(df_filtered)} BH-related sources to {catalog_filename}")

# Prepare BH coords for counting
bh_coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

# Count BHs within each radius
observed_counts = {}
for radius in radii_arcmin:
    sep = cluster_center.separation(bh_coords)
    count = np.sum(sep < radius * u.arcmin)
    observed_counts[radius] = count

# Print counts summary
print("\n=== BH-related Object Counts near Einstein Cross ===")
print(f"{'Radius (arcmin)':<15} | {'Count':<5}")
print("-" * 30)
for radius in radii_arcmin:
    print(f"{radius:<15} | {observed_counts[radius]:<5}")

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from astroquery.simbad import Simbad

# Lens parameters
lens_ra = 172.8685
lens_dec = -12.6155
lens_z = 0.295

# Radii in arcminutes to check
radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]

# BH-related SIMBAD types (conservative)
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'rvz_redshift')

center = SkyCoord(ra=lens_ra * u.deg, dec=lens_dec * u.deg)

print(f"Querying SIMBAD around RX J1131-1231 ({lens_ra}, {lens_dec}) within 10 arcmin radius...")
result = custom_simbad.query_region(center, radius=10 * u.arcmin)

if result is None:
    print("No SIMBAD objects found.")
else:
    df = result.to_pandas()
    df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

    # Filter BH-type objects by object type and redshift range Â±0.05
    pattern = '|'.join(bh_types)
    df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
    df_filtered = df_filtered[
        (df_filtered['rvz_redshift'] >= lens_z - 0.05) &
        (df_filtered['rvz_redshift'] <= lens_z + 0.05)
    ]

    if df_filtered.empty:
        print("No BH-related objects found within redshift window.")
    else:
        coords = SkyCoord(ra=df_filtered['RA'], dec=df_filtered['DEC'], unit=(u.deg, u.deg))
        sep_arcmin = center.separation(coords).arcmin

        print(f"Found {len(df_filtered)} BH-related objects near RX J1131-1231:")
        for r in radii_arcmin:
            count = np.sum(sep_arcmin <= r)
            print(f"  Within {r} arcmin: {count}")

!pip install astroquery astropy numpy pandas scipy

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad

# Lens info
lens_ra = 146.668
lens_dec = 10.103
lens_z = 0.222
z_tol = 0.05  # redshift tolerance

# Radii in arcminutes to analyze
radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]

# SIMBAD BH-related types to filter
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

# Prepare the coordinate
lens_coord = SkyCoord(ra=lens_ra * u.deg, dec=lens_dec * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'rvz_redshift')

print(f"Querying SIMBAD around SDSS J0946+1006 ({lens_ra}, {lens_dec}) within 10 deg radius...")
result = custom_simbad.query_region(lens_coord, radius=10 * u.arcmin)

if result is None:
    print("No objects found in SIMBAD for this region.")
else:
    print(f"Total SIMBAD objects found: {len(result)}")

    df = result.to_pandas()
    df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

    # Filter BH-type objects by object type and redshift
    pattern = '|'.join(bh_types)
    df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
    df_filtered = df_filtered[
        (df_filtered['rvz_redshift'] >= lens_z - z_tol) &
        (df_filtered['rvz_redshift'] <= lens_z + z_tol)
    ]

    if df_filtered.empty:
        print("No BH-related objects found within redshift window.")
    else:
        print(f"Found {len(df_filtered)} BH-related objects in the redshift window.")

        # Convert coords for angular separation calculations
        coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

        # Count BH-related objects within each radius
        counts = {}
        for radius in radii_arcmin:
            sep = lens_coord.separation(coords)
            count = np.sum(sep

!pip install astroquery astropy numpy pandas scipy

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad

# Lens info
lens_ra = 146.668
lens_dec = 10.103
lens_z = 0.222
z_tol = 0.05  # redshift tolerance

# Radii in arcminutes to analyze
radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]

# SIMBAD BH-related types to filter
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

# Prepare the coordinate
lens_coord = SkyCoord(ra=lens_ra * u.deg, dec=lens_dec * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'rvz_redshift')

print(f"Querying SIMBAD around SDSS J0946+1006 ({lens_ra}, {lens_dec}) within 10 deg radius...")
result = custom_simbad.query_region(lens_coord, radius=10 * u.arcmin)

if result is None:
    print("No objects found in SIMBAD for this region.")
else:
    print(f"Total SIMBAD objects found: {len(result)}")

    df = result.to_pandas()
    df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

    # Filter BH-type objects by object type and redshift
    pattern = '|'.join(bh_types)
    df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
    df_filtered = df_filtered[
        (df_filtered['rvz_redshift'] >= lens_z - z_tol) &
        (df_filtered['rvz_redshift'] <= lens_z + z_tol)
    ]

    if df_filtered.empty:
        print("No BH-related objects found within redshift window.")
    else:
        print(f"Found {len(df_filtered)} BH-related objects in the redshift window.")

        # Convert coords for angular separation calculations
        coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

        # Count BH-related objects within each radius
        counts = {}
        for radius in radii_arcmin:
            sep = lens_coord.separation(coords)
            count = np.sum(sep < radius * u.arcmin)
            counts[radius] = count

        print("\n=== BH-related Object Counts near SDSS J0946+1006 ===")
        print(f"{'Radius (arcmin)':<15} | {'Count':<5}")
        print("-" * 30)
        for r in radii_arcmin:
            print(f"{r:<15} | {counts[r]:<5}")

# Lens info for HE 0435-1223
lens_ra = 69.3303
lens_dec = -12.3243
lens_z = 0.454
z_tol = 0.05

radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]

# ... same imports and SIMBAD setup as before ...

lens_coord = SkyCoord(ra=lens_ra * u.deg, dec=lens_dec * u.deg)

print(f"Querying SIMBAD around HE 0435-1223 ({lens_ra}, {lens_dec}) within 10 arcmin radius...")
result = custom_simbad.query_region(lens_coord, radius=10 * u.arcmin)

if result is None:
    print("No objects found in SIMBAD for this region.")
else:
    print(f"Total SIMBAD objects found: {len(result)}")

    df = result.to_pandas()
    df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

    pattern = '|'.join(bh_types)
    df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
    df_filtered = df_filtered[
        (df_filtered['rvz_redshift'] >= lens_z - z_tol) &
        (df_filtered['rvz_redshift'] <= lens_z + z_tol)
    ]

    if df_filtered.empty:
        print("No BH-related objects found within redshift window.")
    else:
        print(f"Found {len(df_filtered)} BH-related objects in the redshift window.")
        coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

        counts = {}
        for radius in radii_arcmin:
            sep = lens_coord.separation(coords)
            counts[radius] = np.sum(sep < radius * u.arcmin)

        print("\n=== BH-related Object Counts near HE 0435-1223 ===")
        print(f"{'Radius (arcmin)':<15} | {'Count':<5}")
        print("-" * 30)
        for r in radii_arcmin:
            print(f"{r:<15} | {counts[r]:<5}")

# Install required packages (run this once in Colab)
!pip install numpy pandas astropy astroquery scipy

import numpy as np
import pandas as pd
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp
from astroquery.simbad import Simbad
import os

# MACS J1149.5+2223 parameters
macs_ra = 177.398
macs_dec = 22.396
macs_z = 0.544
z_tol = 0.05  # redshift tolerance
bbox_size = 1.0  # degrees around cluster center
n_random_trials = 1000

# Apertures to analyze (arcminutes)
radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Minimum exclusion radius for random points (arcminutes)
exclusion_radius_arcmin = 1.5  # keep random points outside this radius

# BH-type SIMBAD object types (same conservative list)
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

catalog_filename = 'macs_j1149_bh_related.csv'

# Parameters specific to MACS J1149.5+2223
cluster_ra = 177.398
cluster_dec = 22.396
cluster_z = 0.544
z_tol = 0.05
bbox_size = 1.0  # degrees around center
n_random_trials = 1000

# Apertures to analyze in arcminutes
radii_arcmin = [0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Minimum exclusion radius for random points (arcmin)
exclusion_radius_arcmin = 1.5

catalog_filename = 'macs_j1149_bh_related.csv'

# Conservative BH-type SIMBAD types
bh_types = [
    'AGN', 'QSO', 'BLLac', 'X', 'Rad', 'EmG', 'Seyfert', 'Sy1', 'Sy2',
    'LINER', 'BH?', 'BLAZAR'
]

# Delete cache if exists
if os.path.exists(catalog_filename):
    os.remove(catalog_filename)
    print(f"Deleted old cache file {catalog_filename}.")

cluster_center = SkyCoord(ra=cluster_ra * u.deg, dec=cluster_dec * u.deg)

# Bounding box for random point sampling
ra_min = cluster_ra - bbox_size / 2
ra_max = cluster_ra + bbox_size / 2
dec_min = cluster_dec - bbox_size / 2
dec_max = cluster_dec + bbox_size / 2

# Setup SIMBAD query with object type and redshift fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'rvz_redshift')

print(f"Querying SIMBAD around MACS J1149.5+2223 ({cluster_ra}, {cluster_dec}) within 2 deg radius...")
result = custom_simbad.query_region(cluster_center, radius=2.0 * u.deg)
if result is None:
    raise ValueError("SIMBAD query returned no results.")

print(f"Total SIMBAD objects found: {len(result)}")

df = result.to_pandas()
df['rvz_redshift'] = pd.to_numeric(df['rvz_redshift'], errors='coerce')

# Filter BH-type objects by object type and redshift tolerance
pattern = '|'.join(bh_types)
df_filtered = df[df['otype'].str.fullmatch(pattern, case=False, na=False)]
df_filtered = df_filtered[
    (df_filtered['rvz_redshift'] >= cluster_z - z_tol) &
    (df_filtered['rvz_redshift'] <= cluster_z + z_tol)
]

if df_filtered.empty:
    print("No BH-related objects found within redshift window.")
else:
    coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))
    df_filtered.loc[:, 'ra'] = coords.ra.deg
    df_filtered.loc[:, 'dec'] = coords.dec.deg

    df_filtered[['main_id', 'ra', 'dec', 'otype', 'rvz_redshift']].to_csv(catalog_filename, index=False)
    print(f"Saved {len(df_filtered)} BH-related sources to {catalog_filename}")

    # Prepare BH coords for clustering at larger radii
    bh_coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

    # Function to generate random points outside exclusion radius
    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60  # convert arcmin to deg
        random_points = []
        attempts = 0
        max_attempts = n_points * 20  # safety cap

        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uni_

from scipy.stats import poisson, ks_2samp

# Define radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15, 20, 25, 30]


# Your cluster center coordinate
cluster_center = SkyCoord(ra=177.398 * u.deg, dec=22.396 * u.deg)  # MACS J1149.5+2223

# BH coords from your filtered dataframe
bh_coords = SkyCoord(ra=df_filtered['ra'], dec=df_filtered['dec'], unit=(u.deg, u.deg))

# Exclusion radius for random points (in arcmin)
exclusion_radius_arcmin = 1.5

# Define bounding box for random sampling (adjust slightly to avoid edges)
bbox_size = 2.0  # deg
ra_min = cluster_center.ra.deg - bbox_size/2
ra_max = cluster_center.ra.deg + bbox_size/2
dec_min = cluster_center.dec.deg - bbox_size/2
dec_max = cluster_center.dec.deg + bbox_size/2

# Function to generate random points outside exclusion radius (reuse or redefine)
def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                        exclusion_radius_arcmin, n_points):
    exclusion_radius_deg = exclusion_radius_arcmin / 60  # convert arcmin to deg
    random_points = []
    attempts = 0
    max_attempts = n_points * 20  # safety cap

    while len(random_points) < n_points and attempts < max_attempts:
        attempts += 1
        rand_ra = np.random.uniform(ra_min, ra_max)
        rand_dec = np.random.uniform(dec_min, dec_max)
        point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
        sep_deg = center_coord.separation(point).deg
        if sep_deg > exclusion_radius_deg:
            random_points.append(point)

    if len(random_points) < n_points:
        print(f"Warning: Only generated {len(random_points)} random points out of {n_points} requested")

    return SkyCoord(random_points)

# Generate random points
n_random_points = 500
random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                   exclusion_radius_arcmin, n_random_points)

# Count BHs within each radius for observed cluster center
observed_counts = {}
for radius in radii_arcmin:
    sep = cluster_center.separation(bh_coords)
    count = np.sum(sep < radius * u.arcmin)
    observed_counts[radius] = count

# Count BHs within each radius for each random point
random_counts = {r: [] for r in radii_arcmin}
for rand_pt in random_points:
    for radius in radii_arcmin:
        sep = rand_pt.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        random_counts[radius].append(count)

# Print summary table
print("\n=== BH-related Object Counts near MACS J1149.5+2223 ===")
print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
print("-" * 75)
for radius in radii_arcmin:
    obs = observed_counts[radius]
    rand_list = np.array(random_counts[radius])
    mean_rand = rand_list.mean()
    # Poisson survival function for p-value: probability to get >= obs given mean_rand
    p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
    p_ks = ks_2samp([obs], rand_list).pvalue
    print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Your strong lens center (e.g. Abell 1689)
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.340 * u.deg)

# Define radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15, 20, 25, 30]

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

# Query SIMBAD for objects within 30 arcmin (max radius)
result = custom_simbad.query_region(cluster_center, radius=30 * u.arcmin)

# Filter BH-like objects
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
if result is None or 'OTYPE' not in result.colnames:
    print("No SIMBAD results or 'OTYPE' column missing!")
else:
    # Filter BH-related types
    mask = [otype in bh_types for otype in result['OTYPE'].astype(str)]
    bh_filtered = result[mask]
    print(f"Found {len(bh_filtered)} BH-type objects near Abell 1689")

    # BH coords
    bh_coords = SkyCoord(ra=bh_filtered['RA_d'], dec=bh_filtered['DEC_d'], unit='deg')

    # Exclusion radius to avoid lens center in random points (e.g. 1.5 arcmin)
    exclusion_radius_arcmin = 1.5

    # Define bounding box for random sampling (2 deg box around center)
    bbox_size = 2.0  # degrees
    ra_min = cluster_center.ra.deg - bbox_size / 2
    ra_max = cluster_center.ra.deg + bbox_size / 2
    dec_min = cluster_center.dec.deg - bbox_size / 2
    dec_max = cluster_center.dec.deg + bbox_size / 2

    # Generate random points outside exclusion radius (reusing your function)
    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60  # arcmin â deg
        random_points = []
        attempts = 0
        max_attempts = n_points * 20

        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)

        if len(random_points) < n_points:
            print(f"Warning: only generated {len(random_points)} random points (requested {n_points})")

        return SkyCoord(random_points)

    # Generate 500 random points avoiding lens exclusion zone
    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    # Count BHs within each radius around cluster center
    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        observed_counts[radius] = count

    # Count BHs within each radius around random points
    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            count = np.sum(sep < radius * u.arcmin)
            random_counts[radius].append(count)

    # Print summary table
    print("\n=== BH-related Object Counts near Abell 1689 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Define radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Cluster center coordinate (Abell 1689 example)
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.340 * u.deg)

# Setup custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('OTYPE', 'RA', 'DEC')

# Query SIMBAD within 30 arcmin radius
result = custom_simbad.query_region(cluster_center, radius=30 * u.arcmin)

if result is None or 'OTYPE' not in result.colnames:
    print("No SIMBAD results or 'OTYPE' column missing!")
else:
    # Filter BH-related object types (case-sensitive)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    is_bh = [otype in bh_types for otype in result['OTYPE'].astype(str)]
    bh_objects = result[is_bh]

    print(f"Found {len(bh_objects)} BH-type objects near Abell 1689")

    # Convert to SkyCoord for distance calculations
    bh_coords = SkyCoord(ra=bh_objects['RA'], dec=bh_objects['DEC'], unit=(u.hourangle, u.deg))

    # Count BHs within each radius from cluster center
    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        observed_counts[radius] = count

    # Print counts
    print("\nRadius (arcmin) | BH Count")
    print("-------------------------")
    for radius in radii_arcmin:
        print(f"{radius:<14} | {observed_counts[radius]}")

result = custom_simbad.query_region(cluster_center, radius=30 * u.arcmin)
print(result)



from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Abell 1689 center coordinates
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.341 * u.deg)

# Customize SIMBAD query to include object type and coordinates
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Remove default coordinate fields to avoid duplication warnings
custom_simbad.remove_votable_fields('coordinates')
# Add fields with proper case, keep it simple
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query radius (e.g., 10 arcmin)
radius_arcmin = 10

# Query SIMBAD around Abell 1689
result = custom_simbad.query_region(cluster_center, radius=radius_arcmin * u.arcmin)

if result is None:
    print("No SIMBAD results found.")
else:
    print(f"SIMBAD columns: {result.colnames}")
    # Handle case sensitivity for object type column
    if 'otype' in result.colnames:
        otype_col = 'otype'
    elif 'OTYPE' in result.colnames:
        otype_col = 'OTYPE'
    else:
        raise ValueError("No 'otype' or 'OTYPE' column found in SIMBAD results.")

    # Define BH-related object types (adjust if needed)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

    # Filter BH-type objects safely
    bh_mask = [str(obj_type).upper() in bh_types for obj_type in result[otype_col]]
    bh_objects = result[bh_mask]

    print(f"Found {len(bh_objects)} BH-type objects within {radius_arcmin}â² of Abell 1689:")
    display(bh_objects)

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Abell 1689 center coords
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.341 * u.deg)

# Custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Add needed fields â do NOT try to remove fields, just add what you want
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query radius (10 arcmin)
radius_arcmin = 10

# Query SIMBAD around cluster center
result = custom_simbad.query_region(cluster_center, radius=radius_arcmin * u.arcmin)

if result is None:
    print("No SIMBAD results found.")
else:
    print(f"Columns in result: {result.colnames}")
    # Check which otype column is present (case sensitive)
    if 'otype' in result.colnames:
        otype_col = 'otype'
    elif 'OTYPE' in result.colnames:
        otype_col = 'OTYPE'
    else:
        raise ValueError("No 'otype' or 'OTYPE' column found in SIMBAD results.")

    # Define BH-related types (upper case for matching)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLAC', 'BLAZAR'}

    # Filter rows with BH types (case insensitive)
    bh_mask = [str(obj).upper() in bh_types for obj in result[otype_col]]
    bh_objects = result[bh_mask]

    print(f"Found {len(bh_objects)} BH-related objects within {radius_arcmin}â² of Abell 1689:")
    display(bh_objects)

import numpy as np
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp

# Your cluster center (Abell 1689)
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.341 * u.deg)

# Filter your SIMBAD results to only BH-type objects (you've done this)
# Assuming 'bh_objects' is your filtered Astropy Table with columns 'ra' and 'dec'

# Convert BH objects to SkyCoord
bh_coords = SkyCoord(ra=bh_objects['RA'], dec=bh_objects['DEC'], unit=(u.deg, u.deg))

# Define radii for counting (arcmin)
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Generate random points outside an exclusion radius to simulate background
def generate_random_points(center, ra_min, ra_max, dec_min, dec_max,
                           exclusion_radius_arcmin, n_points):
    exclusion_radius_deg = exclusion_radius_arcmin / 60
    points = []
    attempts = 0
    max_attempts = n_points * 20
    while len(points) < n_points and attempts < max_attempts:
        attempts += 1
        rand_ra = np.random.uniform(ra_min, ra_max)
        rand_dec = np.random.uniform(dec_min, dec_max)
        p = SkyCoord(ra=rand_ra*u.deg, dec=rand_dec*u.deg)
        if center.separation(p).deg > exclusion_radius_deg:
            points.append(p)
    return SkyCoord(points)

bbox_size = 2.0  # deg box around cluster
ra_min = cluster_center.ra.deg - bbox_size/2
ra_max = cluster_center.ra.deg + bbox_size/2
dec_min = cluster_center.dec.deg - bbox_size/2
dec_max = cluster_center.dec.deg + bbox_size/2

random_points = generate_random_points(cluster_center, ra_min, ra_max, dec_min, dec_max, exclusion_radius_arcmin=1.5, n_points=500)

# Count BHs within each radius around cluster center (observed)
observed_counts = {}
for r in radii_arcmin:
    sep = cluster_center.separation(bh_coords)
    observed_counts[r] = np.sum(sep < r * u.arcmin)

# Count BHs within each radius around each random point (for background)
random_counts = {r: [] for r in radii_arcmin}
for rp in random_points:
    for r in radii_arcmin:
        sep = rp.separation(bh_coords)
        random_counts[r].append(np.sum(sep < r * u.arcmin))

# Print summary table
print(f"\n=== BH-related Object Counts near Abell 1689 ===")
print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
print("-" * 75)

for r in radii_arcmin:
    obs = observed_counts[r]
    rand_arr = np.array(random_counts[r])
    mean_rand = rand_arr.mean()
    # Poisson survival function (p-value of observing >= obs given mean_rand)
    p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
    # KS test observed (single value) vs random distribution
    p_ks = ks_2samp([obs], rand_arr).pvalue
    print(f"{r:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

import numpy as np
from astropy.coordinates import SkyCoord
import astropy.units as u
from scipy.stats import poisson, ks_2samp

# --- Your BH-related objects from SIMBAD, assumed filtered into bh_objects Astropy Table ---
# bh_objects columns include 'ra' and 'dec' (lowercase!)

# Example cluster center: Abell 1689
cluster_center = SkyCoord(ra=197.872 * u.deg, dec=-1.341 * u.deg)

# Convert BH objects to SkyCoord with lowercase column names
bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

# Radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Exclusion radius in arcmin around cluster center for random points to avoid overlap
exclusion_radius_arcmin = 1.5

# Define bounding box (degrees) around cluster center for random point generation
bbox_size = 2.0  # degrees, adjust as needed
ra_min = cluster_center.ra.deg - bbox_size / 2
ra_max = cluster_center.ra.deg + bbox_size / 2
dec_min = cluster_center.dec.deg - bbox_size / 2
dec_max = cluster_center.dec.deg + bbox_size / 2

def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                        exclusion_radius_arcmin, n_points):
    exclusion_radius_deg = exclusion_radius_arcmin / 60  # convert arcmin to deg
    random_points = []
    attempts = 0
    max_attempts = n_points * 20  # safety cap

    while len(random_points) < n_points and attempts < max_attempts:
        attempts += 1
        rand_ra = np.random.uniform(ra_min, ra_max)
        rand_dec = np.random.uniform(dec_min, dec_max)
        point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
        sep_deg = center_coord.separation(point).deg
        if sep_deg > exclusion_radius_deg:
            random_points.append(point)

    if len(random_points) < n_points:
        print(f"Warning: Only generated {len(random_points)} random points out of {n_points} requested")

    return SkyCoord(random_points)

# Generate random points
n_random_points = 500
random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                   exclusion_radius_arcmin, n_random_points)

# Count BH objects within each radius for observed cluster center
observed_counts = {}
for radius in radii_arcmin:
    sep = cluster_center.separation(bh_coords)
    count = np.sum(sep < radius * u.arcmin)
    observed_counts[radius] = count

# Count BH objects within each radius for each random point
random_counts = {r: [] for r in radii_arcmin}
for rand_pt in random_points:
    for radius in radii_arcmin:
        sep = rand_pt.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        random_counts[radius].append(count)

# Print summary table
print("\n=== BH-related Object Counts near Abell 1689 ===")
print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
print("-" * 75)
for radius in radii_arcmin:
    obs = observed_counts[radius]
    rand_list = np.array(random_counts[radius])
    mean_rand = rand_list.mean()
    # Poisson survival function: P(X >= obs) given mean_rand
    p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
    p_ks = ks_2samp([obs], rand_list).pvalue
    print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Define BH-related object types in SIMBAD (case-sensitive)
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

# RX J1347.5-1145 cluster center
cluster_center = SkyCoord(ra=206.885 * u.deg, dec=-11.744 * u.deg)

# Define radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

# Custom Simbad query with timeout and selected fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields('coordinates')  # only if your version supports it, otherwise skip this line
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 10 arcmin radius
radius_query = 10  # arcmin
result = custom_simbad.query_region(cluster_center, radius=radius_query * u.arcmin)

if result is None or 'OTYPE' not in result.colnames:
    print("No SIMBAD results or 'OTYPE' column missing!")
else:
    # Filter for BH-related object types
    result['OTYPE'] = [str(o).strip() for o in result['OTYPE']]  # ensure strings
    bh_mask = [otype in bh_types for otype in result['OTYPE']]
    bh_objects = result[bh_mask]

    print(f"Found {len(bh_objects)} BH-related objects within {radius_query}â² of RX J1347.5-1145")

    # Convert BH objects to SkyCoord
    bh_coords = SkyCoord(ra=bh_objects['RA'], dec=bh_objects['DEC'], unit=(u.deg, u.deg))

    # Function to generate random points outside exclusion zone
    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60  # arcmin to deg
        random_points = []
        attempts = 0
        max_attempts = n_points * 20

        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            sep_deg = center_coord.separation(point).deg
            if sep_deg > exclusion_radius_deg:
                random_points.append(point)

        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} random points out of {n_points} requested")

        return SkyCoord(random_points)

    # Define bounding box for random sampling around cluster center
    bbox_size = 2.0  # degrees
    ra_min = cluster_center.ra.deg - bbox_size/2
    ra_max = cluster_center.ra.deg + bbox_size/2
    dec_min = cluster_center.dec.deg - bbox_size/2
    dec_max = cluster_center.dec.deg + bbox_size/2
    exclusion_radius_arcmin = 1.5

    # Generate random points
    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    # Count observed BHs within each radius
    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        observed_counts[radius] = count

    # Count BHs for each random point
    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            count = np.sum(sep < radius * u.arcmin)
            random_counts[radius].append(count)

    # Print summary table
    print("\n=== BH-related Object Counts near RX J1347.5-1145 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# BH-related types (case sensitive)
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

# Cluster center
cluster_center = SkyCoord(ra=206.885 * u.deg, dec=-11.744 * u.deg)

radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]

custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Don't remove votable fields â just add the ones you want
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

result = custom_simbad.query_region(cluster_center, radius=10 * u.arcmin)

if result is None or 'OTYPE' not in result.colnames:
    print("No SIMBAD results or 'OTYPE' column missing!")
else:
    result['OTYPE'] = [str(o).strip() for o in result['OTYPE']]
    bh_mask = [otype in bh_types for otype in result['OTYPE']]
    bh_objects = result[bh_mask]

    print(f"Found {len(bh_objects)} BH-related objects within 10â² of RX J1347.5-1145")

    bh_coords = SkyCoord(ra=bh_objects['RA'], dec=bh_objects['DEC'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (Â±1 deg)
    bbox_size = 2.0
    ra_min = cluster_center.ra.deg - bbox_size / 2
    ra_max = cluster_center.ra.deg + bbox_size / 2
    dec_min = cluster_center.dec.deg - bbox_size / 2
    dec_max = cluster_center.dec.deg + bbox_size / 2

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} random points out of {n_points}")
        return SkyCoord(random_points)

    n_random_points = 500
    exclusion_radius_arcmin = 1.5
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near RX J1347.5-1145 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import time

def query_simbad_bh_objects(center_coord, radius_arcmin=10, bh_types=None, max_retries=3, wait_sec=5):
    """
    Query SIMBAD around center_coord for BH-related objects within radius_arcmin.
    Retries on failure and handles case-insensitive 'otype' column access.

    Parameters:
        center_coord: SkyCoord, target position
        radius_arcmin: float, search radius in arcmin
        bh_types: set or list of str, SIMBAD object types considered BH-related
        max_retries: int, how many times to retry if no results
        wait_sec: int, seconds to wait between retries

    Returns:
        astropy.table.Table of filtered BH objects or None if no results.
    """

    if bh_types is None:
        bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

    # Setup Simbad query
    custom_simbad = Simbad()
    custom_simbad.TIMEOUT = 60
    # Avoid removing votable fields; some astroquery versions don't support this
    # Just add the fields we want (lowercase 'otype' is what SIMBAD returns)
    custom_simbad.add_votable_fields('otype', 'ra', 'dec')

    attempt = 0
    result = None

    while attempt < max_retries:
        try:
            result = custom_simbad.query_region(center_coord, radius=radius_arcmin * u.arcmin)
            if result is not None and 'OTYPE' in result.colnames:
                # Filter case-insensitively for object types
                otype_col = result['OTYPE'] if 'OTYPE' in result.colnames else result['otype']
                # Convert to str and uppercase to standardize
                otype_upper = np.char.upper(np.array(otype_col).astype(str))
                mask = np.isin(otype_upper, [t.upper() for t in bh_types])
                bh_objects = result[mask]
                if len(bh_objects) > 0:
                    return bh_objects
                else:
                    print(f"No BH-type objects found on attempt {attempt+1}. Retrying...")
            else:
                print(f"No results or missing 'OTYPE' column on attempt {attempt+1}. Retrying...")
        except Exception as e:
            print(f"SIMBAD query error on attempt {attempt+1}: {e}")

        attempt += 1
        time.sleep(wait_sec)

    print("Max retries reached. No BH-type objects found or error persist.")
    return None

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np

# Coordinates of Abell 1689
cluster_center = SkyCoord(ra=197.873, dec=-1.335, unit='deg')

# Define BH-related object types
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLAC', 'BLAZAR'}

# Setup SIMBAD query without removing fields (to avoid AttributeError)
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 10 arcmin radius
result = custom_simbad.query_region(cluster_center, radius=10 * u.arcmin)

if result is None or 'OTYPE' not in result.colnames:
    print("No SIMBAD results or 'OTYPE' column missing!")
else:
    # Filter BH-related objects (case insensitive)
    otype_col = np.char.upper(result['OTYPE'].astype(str))
    mask = np.isin(otype_col, [otype.upper() for otype in bh_types])
    bh_objects = result[mask]

    print(f"Found {len(bh_objects)} BH-related objects within 10â² of Abell 1689:")
    print(bh_objects['MAIN_ID', 'RA', 'DEC', 'OTYPE'])

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np

cluster_center = SkyCoord(ra=197.873, dec=-1.335, unit='deg')

bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLAC', 'BLAZAR'}

custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

result = custom_simbad.query_region(cluster_center, radius=10 * u.arcmin)

if result is None:
    print("No SIMBAD results found within 10â² radius.")
else:
    colnames = [c.lower() for c in result.colnames]
    # Try to get 'otype' column in any case
    if 'otype' in colnames:
        otype_col = result['OTYPE'] if 'OTYPE' in result.colnames else result['otype']
        otype_upper = np.char.upper(otype_col.astype(str))
        mask = np.isin(otype_upper, [otype.upper() for otype in bh_types])
        bh_objects = result[mask]
        print(f"Found {len(bh_objects)} BH-related objects within 10â² of Abell 1689:")
        print(bh_objects['MAIN_ID', 'RA', 'DEC', 'OTYPE'] if 'OTYPE' in result.colnames else bh_objects['MAIN_ID', 'RA', 'DEC', 'otype'])
    else:
        print(f"'otype' column missing in SIMBAD results. Columns found: {result.colnames}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np

# RX J1347.5-1145 coordinates
cluster_center = SkyCoord(ra=206.885 * u.deg, dec=-11.744 * u.deg)

# BH-related object types (uppercase for consistent matching)
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLAC', 'BLAZAR'}

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 10 arcminutes
result = custom_simbad.query_region(cluster_center, radius=10 * u.arcmin)

if result is None:
    print("No SIMBAD results found within 10â² of RX J1347.5-1145.")
else:
    print("Columns in result:", result.colnames)
    # Ensure lowercase column names for safe indexing
    colnames_lower = [c.lower() for c in result.colnames]

    # Extract 'otype' column (case insensitive)
    if 'otype' in colnames_lower:
        otype_col = result['otype']
        # Convert to uppercase string for matching
        otype_upper = np.char.upper(otype_col.astype(str))
        mask = np.isin(otype_upper, list(bh_types))
        bh_objects = result[mask]

        print(f"Found {len(bh_objects)} BH-related objects within 10â² of RX J1347.5-1145:")
        print(bh_objects['main_id', 'ra', 'dec', 'otype'])
    else:
        print(f"'otype' column missing in SIMBAD results. Columns found: {result.colnames}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Custom SIMBAD query setup (keep it simple and case-sensitive)
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Add only needed votable fields (case sensitive)
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Cluster center coords
cluster_center = SkyCoord(ra=109.38 * u.deg, dec=37.75 * u.deg)

# Query SIMBAD around cluster center with 10 arcmin radius
result = custom_simbad.query_region(cluster_center, radius='10m')

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    # Filter BH-related types (case sensitive)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['OTYPE']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 10â² of MACS J0717.5+3745:")

    # Convert BH objects to SkyCoord
    bh_coords = SkyCoord(ra=bh_objects['RA'], dec=bh_objects['DEC'], unit=(u.deg, u.deg))

    # Radii for counting (arcmin)
    radii_arcmin = [0.1, 0.2, 0.5, 1.0, 2.0, 3.0, 5.0, 7.0, 10.0]

    # Count observed BHs within each radius
    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        observed_counts[radius] = count

    # Generate random points to compare (avoid within 1.5 arcmin)
    exclusion_radius_arcmin = 1.5
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg/2
    ra_max = cluster_center.ra.deg + bbox_size_deg/2
    dec_min = cluster_center.dec.deg - bbox_size_deg/2
    dec_max = cluster_center.dec.deg + bbox_size_deg/2

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} random points out of {n_points} requested")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    # Count BHs around each random point
    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            count = np.sum(sep < radius * u.arcmin)
            random_counts[radius].append(count)

    # Print summary table
    print("\n=== BH-related Object Counts near MACS J0717.5+3745 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Lens center coordinates (example: MACS J0717.5+3745)
lens_ra_deg = 109.365  # Replace with your lens RA
lens_dec_deg = 37.764  # Replace with your lens DEC
lens_center = SkyCoord(ra=lens_ra_deg * u.deg, dec=lens_dec_deg * u.deg)

# Customize SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Remove 'coordinates' if your astroquery version supports it; if not, comment out the next line
try:
    custom_simbad.remove_votable_fields('coordinates')
except AttributeError:
    pass
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD around lens center within 10 arcmin
radius = 10 * u.arcmin
result = custom_simbad.query_region(lens_center, radius=radius)

if result is None:
    print("No SIMBAD results returned.")
else:
    print("Columns in result:", result.colnames)

    # Find the exact column name for 'otype' (case sensitive)
    otype_col = None
    for col in result.colnames:
        if col.lower() == 'otype':
            otype_col = col
            break

    if otype_col is None:
        print("No 'otype' column found in SIMBAD results.")
    else:
        # Define BH-related types
        bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

        # Filter rows where otype matches any BH-related type
        mask = [otype in bh_types for otype in result[otype_col]]
        bh_objects = result[mask]

        print(f"Found {len(bh_objects)} BH-related objects within {radius.to(u.arcmin).value}â² of lens:")

        # Print a simplified table of main_id, ra, dec, otype with exact column names
        main_id_col = None
        ra_col = None
        dec_col = None
        for col in result.colnames:
            if col.lower() == 'main_id':
                main_id_col = col
            elif col.lower() == 'ra':
                ra_col = col
            elif col.lower() == 'dec':
                dec_col = col

        if None in [main_id_col, ra_col, dec_col]:
            print("Some expected columns missing, cannot print table.")
        else:
            for row in bh_objects:
                print(f"{row[main_id_col]:<30} {row[ra_col]:>10.6f} {row[dec_col]:>10.6f} {row[otype_col]}")

        # Convert BH objects to SkyCoord for counting by radius
        bh_coords = SkyCoord(ra=bh_objects[ra_col], dec=bh_objects[dec_col], unit=(u.deg, u.deg))

        # Radii to count within (arcmin)
        radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0]

        observed_counts = {}
        for r in radii_arcmin:
            count = np.sum(lens_center.separation(bh_coords) < r * u.arcmin)
            observed_counts[r] = count

        print("\nBH-related Object Counts near lens:")
        print(f"{'Radius (arcmin)':<15} | {'Observed Count'}")
        print("-" * 30)
        for r in radii_arcmin:
            print(f"{r:<15} | {observed_counts[r]}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# --- Input lens coordinates ---
lens_ra_deg = 109.365  # Example: MACS J0717.5+3745
lens_dec_deg = 37.764
lens_center = SkyCoord(ra=lens_ra_deg * u.deg, dec=lens_dec_deg * u.deg)

# --- SIMBAD query setup ---
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
# Remove 'coordinates' field if your astroquery version supports it; else skip this line
try:
    custom_simbad.remove_votable_fields('coordinates')
except AttributeError:
    pass
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query radius
query_radius = 20 * u.arcmin
result = custom_simbad.query_region(lens_center, radius=query_radius)

if result is None:
    print("No SIMBAD results returned.")
    bh_objects = None
else:
    # Identify correct 'otype' column (case insensitive)
    otype_col = next((col for col in result.colnames if col.lower() == 'otype'), None)
    ra_col = next((col for col in result.colnames if col.lower() == 'ra'), None)
    dec_col = next((col for col in result.colnames if col.lower() == 'dec'), None)

    if None in (otype_col, ra_col, dec_col):
        raise ValueError("Missing expected columns in SIMBAD results.")

    # Define BH-related object types (case-sensitive)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}

    mask = [otype in bh_types for otype in result[otype_col]]
    bh_objects = result[mask]

# If no BH objects found, create empty SkyCoord array for safety
if bh_objects is None or len(bh_objects) == 0:
    bh_coords = SkyCoord([], [], unit=(u.deg, u.deg))
    print("No BH-related objects found near lens.")
else:
    bh_coords = SkyCoord(ra=bh_objects[ra_col], dec=bh_objects[dec_col], unit=(u.deg, u.deg))
    print(f"Found {len(bh_objects)} BH-related objects within {query_radius.to(u.arcmin).value}â² of lens:")

    for row in bh_objects:
        print(f"{row['main_id']:<30} {row[ra_col]:>10.6f} {row[dec_col]:>10.6f} {row[otype_col]}")

# --- Random points generation ---

# Define bounding box around lens center (degrees)
bbox_size_deg = 2.0  # size of box in degrees (adjust if needed)
ra_min = lens_center.ra.deg - bbox_size_deg / 2
ra_max = lens_center.ra.deg + bbox_size_deg / 2
dec_min = lens_c

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Define radii in arcmin for counting BH-related objects
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 15.0, 20.0]

# Lens center coordinate (MACS J0717.5+3745 example)
lens_center = SkyCoord(ra=109.44 * u.deg, dec=37.75 * u.deg)

# SIMBAD query setup
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD for objects within 20 arcmin
result = custom_simbad.query_region(lens_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    # Filter BH-related types (case sensitive)
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of lens:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    # Convert BH objects to SkyCoord
    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (degrees)
    bbox_size_deg = 2.0
    ra_min = lens_center.ra.deg - bbox_size_deg / 2
    ra_max = lens_center.ra.deg + bbox_size_deg / 2
    dec_min = lens_center.dec.deg - bbox_size_deg / 2
    dec_max = lens_center.dec.deg + bbox_size_deg / 2

    # Exclusion radius for random points around lens (arcmin)
    exclusion_radius_arcmin = 2.0

    # Function to generate random points outside exclusion radius
    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60  # arcmin to deg
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} random points out of {n_points} requested")
        return SkyCoord(random_points)

    # Generate random points
    n_random_points = 500
    random_points = generate_random_points_outside_lens(
        lens_center, ra_min, ra_max, dec_min, dec_max, exclusion_radius_arcmin, n_random_points)

    # Count BH objects within each radius for observed lens center
    observed_counts = {}
    for radius in radii_arcmin:
        sep = lens_center.separation(bh_coords)
        count = np.sum(sep < radius * u.arcmin)
        observed_counts[radius] = count

    # Count BH objects within each radius for each random point
    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            count = np.sum(sep < radius * u.arcmin)
            random_counts[radius].append(count)

    # Print summary table with Poisson and KS stats
    print("\n=== BH-related Object Counts near lens ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Radii in arcmin
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 15.0, 20.0]

# Cluster center (CL J1226.9+3332)
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of CL J1226.9+3332:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near CL J1226.9+3332 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Updated radii in arcmin including 6,7,8,9
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (CL J1226.9+3332)
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of CL J1226.9+3332:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Updated radii in arcmin including 6,7,8,9
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (CL J1226.9+3332)
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of CL J1226.9+3332:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near CL J1226.9+3332

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Updated radii in arcmin including 6,7,8,9
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (CL J1226.9+3332)
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of CL J1226.9+3332:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near CL J1226.9+3332 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 80)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Updated radii in arcmin including 6,7,8,9
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (MACS J1149.5+2223)
cluster_center = SkyCoord(ra=177.398 * u.deg, dec=22.396 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of MACS J1149.5+2223:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print("\n=== BH-related Object Counts near MACS J1149.5+2223 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 80)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin
radii_arcmin = [0.1, 0.2, 0.3, 0.4,
                0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (MACS J1149.5+2223)
cluster_center = SkyCoord(ra=177.398 * u.deg, dec=22.396 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of MACS J1149.5+2223.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print("\n=== BH-related Object Counts near MACS J1149.5+2223 ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (El Gordo: ACT-CL J0102â4915)
cluster_center = SkyCoord(ra=14.505 * u.deg, dec=-49.242 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of El Gordo.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print("\n=== BH-related Object Counts near El Gordo ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcminutes to analyze
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center: Abell 2744
cluster_center = SkyCoord(ra=3.586 * u.deg, dec=-30.400 * u.deg)

# SIMBAD setup
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin radius of Abell 2744
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    # Define BH-related object types to filter
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR', 'Seyfert'}

    # Filter results for BH types
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of Abell 2744.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Define bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0  # avoid lens core area for randoms

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    # Calculate observed counts within each radius
    observed_counts = {}
    sep = cluster_center.separation(bh_coords)
    for radius in radii_arcmin:
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    # Calculate random counts within each radius for each random point
    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        sep_rand = rand_pt.separation(bh_coords)
        for radius in radii_arcmin:
            random_counts[radius].append(np.sum(sep_rand < radius * u.arcmin))

    # Prepare table data for output
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print("\n=== BH-related Object Counts near Abell 2744 ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center: CL J1226.9+3332
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of CL J1226.9+3332.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print(f"\n=== BH-related Object Counts near CL J1226.9+3332 ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin
radii_arcmin = [0.1, 0.5, 1.0, 2.0,3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Cluster center (Abell 1689)
cluster_center = SkyCoord(ra=197.8588 * u.deg, dec=-1.34 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR', 'Seyfert'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of Abell 1689.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print(f"\n=== BH-related Object Counts near Abell 1689 ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin for the analysis
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Define the next strong merging cluster lens you want to query:
# Example: CL J1226.9+3332 (not yet queried)
cluster_name = "CL J1226.9+3332"
cluster_center = SkyCoord(ra=186.7 * u.deg, dec=33.55 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin radius
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print(f"No SIMBAD results or 'otype' column missing for {cluster_name}!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of {cluster_name}.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0  # exclude random points too close to lens center

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        table_data.append([radius, obs, round(mean_rand, 3), f"{p_poisson:.2e}", f"{p_ks:.3f}"])

    headers = ["Radius (arcmin)", "Observed BH Count", "Mean Random Count", "Poisson p-value", "KS p-value"]

    print(f"\n=== BH-related Object Counts near {cluster_name} ===")
    print(tabulate(table_data, headers=headers, tablefmt="github"))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp
from tabulate import tabulate

# Radii in arcmin
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# RX J1347.5-1145 center
cluster_center = SkyCoord(ra=206.885 * u.deg, dec=-11.744 * u.deg)

# Setup SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(cluster_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of RX J1347.5-1145.")

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg box)
    bbox_size_deg = 2.0
    ra_min = cluster_center.ra.deg - bbox_size_deg / 2
    ra_max = cluster_center.ra.deg + bbox_size_deg / 2
    dec_min = cluster_center.dec.deg - bbox_size_deg / 2
    dec_max = cluster_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(cluster_center, ra_min, ra_max, dec_min, dec_max,
                                                       exclusion_radius_arcmin, n_random_points)

    observed_counts = {}
    for radius in radii_arcmin:
        sep = cluster_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    # Prepare table data
    table_data = []
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poiss_

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Radii in arcmin for counts (including 6,7,8,9 arcmin)
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Lens center coordinate
lens_center = SkyCoord(ra=181.5 * u.deg, dec=-8.78 * u.deg)

# Setup SIMBAD query with additional fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(lens_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of MACS J1206.2-0847:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg square)
    bbox_size_deg = 2.0
    ra_min = lens_center.ra.deg - bbox_size_deg / 2
    ra_max = lens_center.ra.deg + bbox_size_deg / 2
    dec_min = lens_center.dec.deg - bbox_size_deg / 2
    dec_max = lens_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(
        lens_center, ra_min, ra_max, dec_min, dec_max,
        exclusion_radius_arcmin, n_random_points
    )

    observed_counts = {}
    for radius in radii_arcmin:
        sep = lens_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print(f"\n=== BH-related Object Counts near MACS J1206.2-0847 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
from scipy.stats import poisson, ks_2samp

# Radii in arcmin for counts (including 6,7,8,9 arcmin)
radii_arcmin = [0.1, 0.5, 1.0, 2.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0]

# Lens center coordinate
lens_center = SkyCoord(ra=64.04 * u.deg, dec=-24.06 * u.deg)

# Setup SIMBAD query with additional fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query SIMBAD within 20 arcmin
result = custom_simbad.query_region(lens_center, radius=20 * u.arcmin)

if result is None or 'otype' not in result.colnames:
    print("No SIMBAD results or 'otype' column missing!")
else:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['otype']]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-related objects within 20â² of MACS J0416.1-2403:")
    print(bh_objects['main_id', 'ra', 'dec', 'otype'])

    bh_coords = SkyCoord(ra=bh_objects['ra'], dec=bh_objects['dec'], unit=(u.deg, u.deg))

    # Bounding box for random sampling (2 deg square)
    bbox_size_deg = 2.0
    ra_min = lens_center.ra.deg - bbox_size_deg / 2
    ra_max = lens_center.ra.deg + bbox_size_deg / 2
    dec_min = lens_center.dec.deg - bbox_size_deg / 2
    dec_max = lens_center.dec.deg + bbox_size_deg / 2

    exclusion_radius_arcmin = 2.0

    def generate_random_points_outside_lens(center_coord, ra_min, ra_max, dec_min, dec_max,
                                            exclusion_radius_arcmin, n_points):
        exclusion_radius_deg = exclusion_radius_arcmin / 60
        random_points = []
        attempts = 0
        max_attempts = n_points * 20
        while len(random_points) < n_points and attempts < max_attempts:
            attempts += 1
            rand_ra = np.random.uniform(ra_min, ra_max)
            rand_dec = np.random.uniform(dec_min, dec_max)
            point = SkyCoord(ra=rand_ra * u.deg, dec=rand_dec * u.deg)
            if center_coord.separation(point).deg > exclusion_radius_deg:
                random_points.append(point)
        if len(random_points) < n_points:
            print(f"Warning: Only generated {len(random_points)} out of {n_points} random points")
        return SkyCoord(random_points)

    n_random_points = 500
    random_points = generate_random_points_outside_lens(
        lens_center, ra_min, ra_max, dec_min, dec_max,
        exclusion_radius_arcmin, n_random_points
    )

    observed_counts = {}
    for radius in radii_arcmin:
        sep = lens_center.separation(bh_coords)
        observed_counts[radius] = np.sum(sep < radius * u.arcmin)

    random_counts = {r: [] for r in radii_arcmin}
    for rand_pt in random_points:
        for radius in radii_arcmin:
            sep = rand_pt.separation(bh_coords)
            random_counts[radius].append(np.sum(sep < radius * u.arcmin))

    print(f"\n=== BH-related Object Counts near MACS J0416.1-2403 ===")
    print(f"{'Radius (arcmin)':<15} | {'Observed':<8} | {'Mean Random':<12} | {'Poisson p-val':<14} | {'KS p-val'}")
    print("-" * 75)
    for radius in radii_arcmin:
        obs = observed_counts[radius]
        rand_list = np.array(random_counts[radius])
        mean_rand = rand_list.mean()
        p_poisson = poisson.sf(obs - 1, mean_rand) if mean_rand > 0 else 1.0
        p_ks = ks_2samp([obs], rand_list).pvalue
        print(f"{radius:<15} | {obs:<8} | {mean_rand:<12.2f} | {p_poisson:<14.2e} | {p_ks:.3f}")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Define lens center
el_gordo_center = SkyCoord(ra=15.728 * u.deg, dec=-49.261 * u.deg, frame='icrs')

# SIMBAD query radius
radius = 20 * u.arcmin

# Custom query to get main_id, ra, dec, and object type
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

# Perform the query
result = custom_simbad.query_region(el_gordo_center, radius=radius)

# Filter for BH-related objects
bh_types = {'BLAZAR', 'AGN', 'QSO', 'XRB', 'BH', 'BHXRB'}
bh_matches = result[[otype in bh_types for otype in result['OTYPE']]]

# Print results
if len(bh_matches) > 0:
    print(f"Found {len(bh_matches)} BH-related objects within {radius.to(u.arcmin).value}â² of El Gordo:")
    for row in bh_matches:
        print(f"{row['MAIN_ID']:35s} {row['RA_d']:>10.6f} {row['DEC_d']:>10.6f} {row['OTYPE']}")
else:
    print("No BH-related objects found within 20â² of El Gordo.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Set up custom Simbad query with correct field names
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120  # Increase timeout for large queries
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')  # Correct case-sensitive field names

# Example query: Search within 20 arcmin of a known lens (e.g., Bullet Cluster)
lens_coord = SkyCoord(ra=104.6458, dec=-55.6748, unit='deg')
result = custom_simbad.query_region(lens_coord, radius=20 * u.arcmin)

# Display result if available
if result is not None and 'OTYPE' in result.colnames:
    print(result[['MAIN_ID', 'RA_d', 'DEC_d', 'OTYPE']])
else:
    print("No results or 'OTYPE' column missing.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Set up custom Simbad query with updated field names
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 120
custom_simbad.add_votable_fields('otype', 'ra', 'dec')  # updated field names

# Example: search near Bullet Cluster
lens_coord = SkyCoord(ra=104.6458, dec=-55.6748, unit='deg')
result = custom_simbad.query_region(lens_coord, radius=20 * u.arcmin)

# Check and print results
if result is not None and {'OTYPE', 'RA', 'DEC'}.issubset(result.colnames):
    print(result[['MAIN_ID', 'RA', 'DEC', 'OTYPE']])
else:
    print("No results or expected columns not found.")

!pip install --upgrade astroquery

!pip install astroquery lenscat

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import pandas as pd
from scipy.stats import poisson, ks_2samp
import random

# Abell 2744 center coordinates (Pandora's Cluster)
ra_abell = 3.5865  # degrees
dec_abell = -30.4000  # degrees
coord_abell = SkyCoord(ra=ra_abell*u.deg, dec=dec_abell*u.deg, frame='icrs')

# Search radii in arcminutes (small to large)
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import pandas as pd
from scipy.stats import poisson, ks_2samp
import random

# Abell 2744 center coordinates (Pandora's Cluster)
ra_abell = 3.5865  # degrees
dec_abell = -30.4000  # degrees
coord_abell = SkyCoord(ra=ra_abell*u.deg, dec=dec_abell*u.deg, frame='icrs')

# Search radii in arcminutes (small to large)
radii_arcmin = [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
                8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0]

# Object types to count (black holeâlike)
bh_types = ['BH', 'BH?', 'QSO', 'AGN', 'BLLac', 'XRB', 'Sy1', 'Sy2', 'BLAZAR']

# Custom SIMBAD query with filtering
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields('coordinates')
custom_simbad.add_votable_fields('otype')

# Query actual field
result = custom_simbad.query_region(coord_abell, radius=30*u.arcmin)
bh_objects = result[np.isin(result['OTYPE'], bh_types)]
bh_coords = SkyCoord(bh_objects['RA'], bh_objects['DEC'], unit=(u.hourangle, u.deg))

# Compute separations for each radius
observed_counts = []
for r in radii_arcmin:
    sep = coord_abell.separation(bh_coords).arcminute
    count = np.sum(sep <= r)
    observed_counts.append(count)

# Generate 500 random controls outside 1.5Â° of Abell 2744
n_random = 500
random_counts_by_radius = {r: [] for r in radii_arcmin}

for _ in range(n_random):
    while True:
        ra_rand = random.uniform(0, 360)
        dec_rand = random.uniform(-60, 60)
        coord_rand = SkyCoord(ra_rand*u.deg, dec_rand*u.deg)
        if coord_rand.separation(coord_abell).degree > 1.5:
            break
    result_rand = custom_simbad.query_region(coord_rand, radius=30*u.arcmin)
    if result_rand is None:
        continue
    bh_rand = result_rand[np.isin(result_rand['OTYPE'], bh_types)]
    bh_rand_coords = SkyCoord(bh_rand['RA'], bh_rand['DEC'], unit=(u.hourangle, u.deg))
    for r in radii_arcmin:
        sep_rand = coord_rand.separation(bh_rand_coords).arcminute
        count_rand = np.sum(sep_rand <= r)
        random_counts_by_radius[r].append(count_rand)

# Compute statistics
mean_random = [np.mean(random_counts_by_radius[r]) for r in radii_arcmin]
poisson_pvals = [poisson.sf(obs-1, mu) if mu > 0 else 1.0
                 for obs, mu in zip(observed_counts, mean_random)]
ks_pvals = [ks_2samp([obs]*n_random, random_counts_by_radius[r]).pvalue
            for obs, r in zip(observed_counts, radii_arcmin)]

# Output table
df = pd.DataFrame({
    'Radius (arcmin)': radii_arcmin,
    'Observed BH Count': observed_counts,
    'Mean Count (Random)': np.round(mean_random, 2),
    'Poisson p-val': [f'{p:.2e}' if p < 0.01 else f'{p:.3f}' for p in poisson_pvals],
    'KS p-val': [f'{p:.3f}' for p in ks_pvals]
})

print(df.to_string(index=False))

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Abell 1689 coordinates
abell_coord = SkyCoord(ra=197.872*u.degree, dec=-1.340*u.degree, frame='icrs')

# Define SIMBAD with custom fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype')

# Search radius (in arcminutes)
radius_arcmin = 2.0  # or any other radius

# Run the SIMBAD query
result = custom_simbad.query_region(abell_coord, radius=radius_arcmin * u.arcmin)

# Filter to BH-related objects
bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
if result is not None:
    bh_objects = result[[otype in bh_types for otype in result['OTYPE'].astype(str)]]
    print(f"Found {len(bh_objects)} BH-type objects within {radius_arcmin}â² of Abell 1689")
    display(bh_objects)
else:
    print("No objects found in the query region.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# New lens center (e.g. Abell 1689)
target_coord = SkyCoord(ra=197.872*u.degree, dec=-1.340*u.degree, frame='icrs')

# Set up SIMBAD with 'otype' field included
simbad = Simbad()
simbad.TIMEOUT = 60
simbad.add_votable_fields('otype')

# Search radius
radius_arcmin = 2.0

# Run query
result = simbad.query_region(target_coord, radius=radius_arcmin * u.arcmin)

# Check and filter BH-like objects
if result is not None and 'OTYPE' in result.colnames:
    bh_types = {'BH', 'XRB', 'BHXRB', 'QSO', 'AGN', 'BLLac', 'BLAZAR'}
    mask = [otype in bh_types for otype in result['OTYPE'].astype(str)]
    bh_objects = result[mask]
    print(f"Found {len(bh_objects)} BH-type objects within {radius_arcmin}â²")
    display(bh_objects)
else:
    print("No result or 'OTYPE' field missing. Check if votable field was added.")